**********************
Note number: 1
Author: Silvia
Date: 20-06-2014
Topic: Orbital change
**********************

The change in the orbit by stellar interaction is calculated within Adrian's code for the secular evolution that solve the differential equations of motion. 

accretion efficiency
e.g. beta_1->2_wind = the accretion efficiency of the wind of star 1 onto star 2 
b12w    =   beta_1->2_wind
b21w    =   beta_2->1_wind
bin3w   =   beta_in->3_wind
b3inw   =   beta_3->in_wind  = 0 
binr    =   beta_in_rlof
boutr   =   beta_out_rlof    = 0

specific angular momentum loss
e.g. for a fast isotropic wind gamma = Ma/Md 
g12w    =   gamma_1->2_wind
g21w    =   gamma_2->1_wind
gin3w   =   gamma_in->3_wind
g3inw   =   gamma_3->in_wind
ginr    =   gamma_in_rlof
goutr   =   gamma_out_rlof

Theoretically:
a_dot   = f(Md, Md_dot, Ma, a, beta, gamma) 

a_in is affected by:
    - the wind from star 1 that's possible accreted by star 2
    - the wind from star 2 that's possible accreted by star 1
    - Roche lobe overflow (mass transfer) in the inner binary
Not taken into account at the moment are:    
    - Roche lobe overflow (mass transfer) in the outer binary (THIS SHOULD BE TAKEN INTO ACCOUNT)
    - the wind from star 3 that's possible accreted by the inner binary (at the moment we assume this wind is completely non-conservatively) 
    
a_in_dot = f(M1, M1w_dot, M2, a_in, b12w, g12w) +
           f(M2, M2w_dot, M1, a_in, b21w, g21w) +
           f(Md, Min_dot, Ma, a_in, binr, ginr) 

a_out is affected by:
    - the wind from star 3 that's possible accreted by the inner binary (at the moment we assume this wind is completely non-conservatively) 
    - the wind from star 1+2 that's possible accreted by star 3
    - material that is lost from the Roche lobe overflow (mass transfer) in the inner binary affects the outer binary as a wind 
    - Roche lobe overflow (mass transfer) in the outer binary 
    
a_out_dot = f(M3, M3w_dot, M1+M2, a_out, b3inw, g3inw) + 
            f(M1+M2, M1w_dot*(1-b12w) + Mw2_dot* (1-b21w) + Min_dot*(1-binr), M3, a_out, bin3w, gin3w) +
            f(M3, Mout_dot, M1+M2, a_out, boutr, goutr)  



**********************
Note number: 2
Author: Silvia
Date: 20-06-2014
Topic: Conservativeness of mass transfer
**********************
For now we assume that stable mass transfer is conservative. A possibility of mass loss is included in the differential equations. 
 
**********************
Note number: 3
Author: Silvia
Date: 20-06-2014
Topic: Orbital effect of mass transfer
**********************
For now, we assume the following:

Stable mass transfer in the inner binary, affects the outer binary as a wind.
Unstable mass transfer (common-envelope phase) in the inner binary, affects the outer binary as a wind. 

Unstable mass transfer in the outer binary, simulation stops. 
Stable mass transfer in the outer binary, affects the inner binary as a sling shot (how exactly?) This occurs in roughly 10% of the triples. 
 
**********************
Note number: 4
Author: Silvia
Date: 20-06-2014
Topic: Applications
**********************
_ Which evolutionary paths are most common in triples? 
- Which processes are most important in triples?
- Similar for binaries with planets.
- How many single stars binaries were born in triples? 
 
**********************
Note number: 5
Author: Silvia
Date: 20-06-2014
Topic: Mass transfer in eccentric orbit
**********************
For now we assume, that the effect on the orbit from mass transfer in an eccentric orbit is not dependent on the orbital phase. However, we check for Roche lobe overflow at pericenter. 

**********************
Note number: 6
Author: Silvia
Date: 20-06-2014
Topic: Orbital effects mass transfer + winds
**********************
We take into account the effect of these processes on the semi-major axis, but not on other parameters such as the argument of pericenter or the rotation. There is a reference for the effect onto the argument of pericenter from a isotropic fast mass loss (e.g. wind), but a prescription for the effect from mass transfer is lacking. 

**********************
Note number: 7
Author: Silvia
Date: 20-06-2014
Topic: Connection between parts of the code
**********************
What is the best way of supplying Adrian's code with information, such as the accretion efficiency? 
(good & bad) options are:
- put the information in parameters. Make sure these parameters are updated when Adrian's code is called. Possible make a function ('update') that is run before Adrian's code, that updates all necessary parameters. 
- make callable functions that return the nessecary parameters

**********************
Note number: 8
Author: Silvia
Date: 24-06-2014 
Topic: Gyration radii for MS
**********************
The gyration radii for MS in SeBa are based on a fit to Claret & Gimenez 1990, ApSS 196,215. 
de Mink et al. 2013, 764, 166, have made a more elaborate, but still simple fit based on Onno's stellar evolution models taking into account de evolution along the MS. This could possible be updated when necessary.

**********************
Note number: 9
Author: Silvia
Date: 7-07-2014 
Topic: Stability of mass transfer
**********************
For now mass transfer is unstable if the Darwin-Riemann instability occurs or when the mass ratio of donor/accretor > 3, or when the mass ratio of donor/accretor > 1 for giant donors. 
This last assume is extremely crude. 


**********************
Note number: 10
Author: Silvia
Date: 22-07-2014
Topic: Order of running codes
**********************

When we take into account the effect of wind mass loss to the orbit, there is a numerical error between the theoretical orbital change and the change calculated by us. The error is smaller when we first run the stellar evolution code, calculate the wind mass loss rate, and then run the secular evolution code. In the reversed order, the secular evolution takes the wind mass loss rate of the previous timestep, so that the actually mass lost in a certain timestep might not correspond to the wind mass loss rate times the timestep. The difference due to the order is about a factor 10 on the error on the final orbit. In order to reduce the error, smaller timesteps need to be taken. That also means that reversing the se and sec code, makes the code faster. 
This is a disadvantage, because it makes it more likely that we have to step back in time when roche lobe overflow occurs during a timestep. 

--> 
revision 5627
Order in evolve_triple changed again. Now 1) determine_time_step 2) se_code 3) determine_mass_transfer_timescale 4) resolve_interaction 5) secular_code 6) check_for_rlof. In short step 4 moved up (used to be the last step). This avoids confusion with step 6, which determines RLOF for the next timestep. Step 4 is also before the secular code, so that we can relatively easily adjust the system when dM > M_envelope (implemented in revision 5647) 

**********************
Note number: 10
Author: Silvia
Date: 22-07-2014
Topic: When switching to SSE
**********************
We use some functions or parameters from SeBa, which are not accessible for SSE.
- gyration radius
- change mass
- wind_mass_loss_rate

Regarding timesteps, 
Is it always true that the star goes to the end of the phase? E.g. in order not to skip the maximum radius on the giant branch. 


**********************
Note number: 11
Author: Silvia
Date: 22-07-2014
Topic: time_derivative_of_radius
**********************
time_derivative_of_radius only includes the effect of the wind, it does not include the change in the radius due to mass transfer

**********************
Note number: 12
Author: Silvia
Date: 22-07-2014
Topic: stability criterium in secular code
**********************
The stability criterium is wide. Some systems that are stable, might be lost now.


**********************
Note number: 13
Author: Silvia
Date: 22-07-2014
Topic: gamma-CE + eccentricity
**********************
In the implimentation of the gamma-CE, there is a dependence on the eccentricity through the orbital angular momentum. Do we notice the effect?


**********************
Note number: 14
Author: Silvia
Date: 17-09-2014
Topic: 1PN inner outer term
**********************
Has been neglected for a long time, not clear how important it is. 


**********************
Note number: 15
Author: Silvia
Date: 17-09-2014
Topic: 1PN inner outer term
**********************
The stability criterion is valid for q<5.


**********************
Note number: 
Author: 
Date: 
Topic: 
**********************
for tides the radius should be constant -> small enough timesteps
I've tried the minimum of:
    dt < f * R/Rdot
    dt < f' * sqrt(R/Rdubbeldot) 
    met f=f'= 0.005 (code shown below)

but leads to very long simulations (hours) for


        M1 = 5.|units.MSun                      4 |units.MSun
        M2 = 0.1|units.MSun
        M3 = 0.08|units.MSun
        a_in = 1.e6|units.RSun
        a_out = 1.e10|units.RSun
        e_in, e_out = 0.0
        i, o_in, o_out = 0
        g_in, g_out = 0.5*np.pi
        T_end = 125|units.Myr                   220 |units.Myr
  
I've settled for   
      dt < f * R/Rdot * Rdot_prev/Rdot which seems to work fine. However small timesteps on the agb, smaller then the inner period. Are equations are not valid on these timescales (orbital averaging). 

    def determine_time_step_radius_change(self, stellar_system = None):
    #note: returned value can be inf when the change in radius <= 0
        #radius is only necessary for tides
        if not self.secular_code.parameters.include_inner_tidal_terms and not self.secular_code.parameters.include_outer_tidal_terms:
            return np.inf |units.Myr
    
        if stellar_system == None:
            stellar_system = self.triple
            
        if stellar_system.is_star:
            dt = np.inf |units.Myr
            if stellar_system.previous_stellar_type == 3|units.stellar_type and stellar_system.stellar_type == 4|units.stellar_type:
                #during transition from first giant branch to core helium burning the radius can change discontinuous
                dt = np.inf |units.Myr
            else:
                if stellar_system.time_derivative_of_radius != quantities.zero:
                   dt = abs(maximum_radius_change_factor0*stellar_system.radius / stellar_system.time_derivative_of_radius)
            if REPORT_DT:
                print "Dt_radius_change_star = ", dt
            return dt 
        else:
            dt1 = self.determine_time_step_radius_change(stellar_system.child1)        
            dt2 = self.determine_time_step_radius_change(stellar_system.child2)
            if REPORT_DT:
                print "Dt_radius_change_binary = ", dt1, dt2
            return min(dt1, dt2) 




    def determine_time_step_radius_change2(self, stellar_system = None):
    #note: returned value can be inf when the change in radius <= 0
        #radius is only necessary for tides
        if not self.secular_code.parameters.include_inner_tidal_terms and not self.secular_code.parameters.include_outer_tidal_terms:
            return np.inf |units.Myr
    
        if stellar_system == None:
            stellar_system = self.triple
            
        if stellar_system.is_star:
            dt = np.inf |units.Myr
            if stellar_system.previous_stellar_type == 3|units.stellar_type and stellar_system.stellar_type == 4|units.stellar_type:
                #during transition from first giant branch to core helium burning the radius can change discontinuous
                dt = np.inf |units.Myr
            elif stellar_system.stellar_type in stellar_types_remnants and stellar_system.previous_stellar_type != stellar_system.stellar_type:
                #transition to helium star, helium giant, wd, ns or bh
                dt = np.inf |units.Myr
            else:
                time_step = self.time - self.previous_time
                double_time_derivative_of_radius = (stellar_system.time_derivative_of_radius - stellar_system.previous_time_derivative_of_radius)/time_step
                if double_time_derivative_of_radius != quantities.zero:
                    dt = self.maximum_radius_change_factor*np.sqrt(abs(stellar_system.radius / double_time_derivative_of_radius))


            if REPORT_DT:
                print "Dt_radius_change_star = ", dt
            return dt 
        else:
            dt1 = self.determine_time_step_radius_change2(stellar_system.child1)        
            dt2 = self.determine_time_step_radius_change2(stellar_system.child2)
            if REPORT_DT:
                print "Dt_radius_change_binary2 = ", dt1, dt2
            return min(dt1, dt2) 
    


**********************
Note number: 
Author: 
Date: 
Topic: 
**********************
**********************
Note number: 
Author: 
Date: 
Topic: 
**********************
**********************
Note number: 
Author: 
Date: 
Topic: 
**********************
**********************
Note number: 
Author: 
Date: 
Topic: 
**********************
**********************
Note number: 
Author: 
Date: 
Topic: 
**********************
**********************
Note number: 
Author: 
Date: 
Topic: 
**********************
